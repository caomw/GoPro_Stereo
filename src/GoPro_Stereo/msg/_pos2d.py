"""autogenerated by genmsg_py from pos2d.msg. Do not edit."""
import roslib.message
import struct


class pos2d(roslib.message.Message):
  _md5sum = "b26924efcba5b88ad62c7ad3ea0376f4"
  _type = "GoPro_Stereo/pos2d"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 x1
float32 y1
float32 x2
float32 y2
bool flag

"""
  __slots__ = ['x1','y1','x2','y2','flag']
  _slot_types = ['float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       x1,y1,x2,y2,flag
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(pos2d, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x1 is None:
        self.x1 = 0.
      if self.y1 is None:
        self.y1 = 0.
      if self.x2 is None:
        self.x2 = 0.
      if self.y2 is None:
        self.y2 = 0.
      if self.flag is None:
        self.flag = False
    else:
      self.x1 = 0.
      self.y1 = 0.
      self.x2 = 0.
      self.y2 = 0.
      self.flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4fB.pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.x1, _x.y1, _x.x2, _x.y2, _x.flag,) = _struct_4fB.unpack(str[start:end])
      self.flag = bool(self.flag)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4fB.pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.x1, _x.y1, _x.x2, _x.y2, _x.flag,) = _struct_4fB.unpack(str[start:end])
      self.flag = bool(self.flag)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4fB = struct.Struct("<4fB")
