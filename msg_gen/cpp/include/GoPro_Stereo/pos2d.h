/* Auto-generated by genmsg_cpp for file /home/withniu/ros_workspace/GoPro_Stereo/msg/pos2d.msg */
#ifndef GOPRO_STEREO_MESSAGE_POS2D_H
#define GOPRO_STEREO_MESSAGE_POS2D_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace GoPro_Stereo
{
template <class ContainerAllocator>
struct pos2d_ {
  typedef pos2d_<ContainerAllocator> Type;

  pos2d_()
  : x1(0.0)
  , y1(0.0)
  , x2(0.0)
  , y2(0.0)
  , flag(false)
  {
  }

  pos2d_(const ContainerAllocator& _alloc)
  : x1(0.0)
  , y1(0.0)
  , x2(0.0)
  , y2(0.0)
  , flag(false)
  {
  }

  typedef float _x1_type;
  float x1;

  typedef float _y1_type;
  float y1;

  typedef float _x2_type;
  float x2;

  typedef float _y2_type;
  float y2;

  typedef uint8_t _flag_type;
  uint8_t flag;


private:
  static const char* __s_getDataType_() { return "GoPro_Stereo/pos2d"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b26924efcba5b88ad62c7ad3ea0376f4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 x1\n\
float32 y1\n\
float32 x2\n\
float32 y2\n\
bool flag\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x1);
    ros::serialization::serialize(stream, y1);
    ros::serialization::serialize(stream, x2);
    ros::serialization::serialize(stream, y2);
    ros::serialization::serialize(stream, flag);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x1);
    ros::serialization::deserialize(stream, y1);
    ros::serialization::deserialize(stream, x2);
    ros::serialization::deserialize(stream, y2);
    ros::serialization::deserialize(stream, flag);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x1);
    size += ros::serialization::serializationLength(y1);
    size += ros::serialization::serializationLength(x2);
    size += ros::serialization::serializationLength(y2);
    size += ros::serialization::serializationLength(flag);
    return size;
  }

  typedef boost::shared_ptr< ::GoPro_Stereo::pos2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::GoPro_Stereo::pos2d_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pos2d
typedef  ::GoPro_Stereo::pos2d_<std::allocator<void> > pos2d;

typedef boost::shared_ptr< ::GoPro_Stereo::pos2d> pos2dPtr;
typedef boost::shared_ptr< ::GoPro_Stereo::pos2d const> pos2dConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::GoPro_Stereo::pos2d_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::GoPro_Stereo::pos2d_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace GoPro_Stereo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::GoPro_Stereo::pos2d_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::GoPro_Stereo::pos2d_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::GoPro_Stereo::pos2d_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b26924efcba5b88ad62c7ad3ea0376f4";
  }

  static const char* value(const  ::GoPro_Stereo::pos2d_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb26924efcba5b88aULL;
  static const uint64_t static_value2 = 0xd62c7ad3ea0376f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::GoPro_Stereo::pos2d_<ContainerAllocator> > {
  static const char* value() 
  {
    return "GoPro_Stereo/pos2d";
  }

  static const char* value(const  ::GoPro_Stereo::pos2d_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::GoPro_Stereo::pos2d_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x1\n\
float32 y1\n\
float32 x2\n\
float32 y2\n\
bool flag\n\
\n\
";
  }

  static const char* value(const  ::GoPro_Stereo::pos2d_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::GoPro_Stereo::pos2d_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::GoPro_Stereo::pos2d_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x1);
    stream.next(m.y1);
    stream.next(m.x2);
    stream.next(m.y2);
    stream.next(m.flag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pos2d_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::GoPro_Stereo::pos2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::GoPro_Stereo::pos2d_<ContainerAllocator> & v) 
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<float>::stream(s, indent + "  ", v.y2);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GOPRO_STEREO_MESSAGE_POS2D_H

